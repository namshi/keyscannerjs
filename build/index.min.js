(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.keyscanner = factory());
}(this, (function () { 'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* 
KeyScannerJS 
A library to detect automated keyboard events from external devices (such as a barcode scanner)
and differentiates between human keystroke inputs with a high level of accuracy.
This reader software, hence allows obtaining barcode information, without
the user having to focus the cursor on a textfield.
*/

var DEFAULT_CONFIG = {
  overall_percentage: 85,
  key_stroke_speed_ms: 0.017,
  minimum_no_chars: 4
};

var keyscanner = function () {
  function keyscanner(callback) {
    var _this = this;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;

    _classCallCheck(this, keyscanner);

    Object.defineProperty(this, 'stop', {
      enumerable: true,
      writable: true,
      value: function value() {
        document.removeEventListener('keydown', _this.startListner, false);
      }
    });
    Object.defineProperty(this, 'logInfo', {
      enumerable: true,
      writable: true,
      value: function value(key, timeStamp) {
        if (!['Shift', 'Enter'].includes(key)) {
          _this.timeStampBuffer.push(timeStamp);
          _this.keyStrokeBuffer.push(key);
        }
      }
    });
    Object.defineProperty(this, 'startListner', {
      enumerable: true,
      writable: true,
      value: function value(event) {
        _this.logInfo(event.key, event.timeStamp);
        clearTimeout(_this.timerHandle);

        _this.timerHandle = setTimeout(function () {
          var isBarcodeMachine = _this.isBarcodeMachine();

          if (isBarcodeMachine) {
            var fetchBarcodeBuffer = _this.fetchBarcodeBuffer();
            _this.callback(fetchBarcodeBuffer);
          }
          _this.initBuffer();
        }, 150);
      }
    });

    this.callback = callback;
    this.timerHandle = 1;
    this.initListenHandler();
    this.BARCODE_THRESHOLD = config.key_stroke_speed_ms || DEFAULT_CONFIG.key_stroke_speed_ms;
    this.HUMAN_MACHINE_SPEED_THRESHOLD_PERCENTAGE = config.overall_percentage || DEFAULT_CONFIG.overall_percentage;
    this.MINIMUM_NO_CHARS = config.minimum_no_chars || DEFAULT_CONFIG.minimum_no_chars;
    return {
      stop: this.stop
    };
  }

  _createClass(keyscanner, [{
    key: 'initListenHandler',
    value: function initListenHandler() {
      document.addEventListener('keydown', this.startListner, false);
      this.initBuffer();
    }
  }, {
    key: 'initBuffer',
    value: function initBuffer() {
      this.keyStrokeBuffer = [];
      this.timeStampBuffer = [];
    }
  }, {
    key: 'timeDifference',
    value: function timeDifference(timestamp1, timestamp2) {
      return (timestamp2 - timestamp1) / 1000;
    }
  }, {
    key: 'fetchBarcodeBuffer',
    value: function fetchBarcodeBuffer() {
      return this.keyStrokeBuffer.join('');
    }
  }, {
    key: 'isBarcodeMachine',
    value: function isBarcodeMachine() {
      var _this2 = this;

      var bufferLength = this.timeStampBuffer.length - 1;
      var counter = 0;
      this.timeStampBuffer.forEach(function (timestamp, index) {
        if (index <= bufferLength) {
          var diff = _this2.timeDifference(timestamp, _this2.timeStampBuffer[index + 1]);
          if (diff < _this2.BARCODE_THRESHOLD) {
            counter = counter + 1;
          }
        }
      });
      var achievedPercentage = counter * 100 / bufferLength;
      return achievedPercentage > this.HUMAN_MACHINE_SPEED_THRESHOLD_PERCENTAGE && counter + 1 >= this.MINIMUM_NO_CHARS;
    }
  }]);

  return keyscanner;
}();

return keyscanner;

})));
